IF DB_ID('PROCESO__MATRICULA') IS NOT NULL
DROP DATABASE PR__MATRICULA
GO

CREATE DATABASE PR__MATRICULA
GO

USE PR__MATRICULA
GO



IF OBJECT_ID('TIPO_MATRICULA') IS NOT NULL
BEGIN
DROP TABLE TIPO_MATRICULA
END 
CREATE TABLE TIPO_MATRICULA
(
COD_TIPO_MAT CHAR(3) NOT NULL PRIMARY KEY,
DESC_TIPO_MAT VARCHAR(50) NOT NULL
)
GO


IF OBJECT_ID('NIVEL') IS NOT NULL
BEGIN
DROP TABLE NIVEL
END 

CREATE TABLE NIVEL
(
COD_NIVEL CHAR(3) NOT NULL PRIMARY KEY,
DESC_NIVEL VARCHAR(25) NOT NULL
)
GO

IF OBJECT_ID('IDIOMA') IS NOT NULL
BEGIN
DROP TABLE IDIOMA
END 
CREATE TABLE IDIOMA
(
COD_IDIOMA CHAR(2) NOT NULL PRIMARY KEY,
DESC_IDIOMA VARCHAR(30) NOT NULL
)
GO

IF OBJECT_ID('GRADO') IS NOT NULL
BEGIN
DROP TABLE GRADO
END 
CREATE TABLE GRADO
(
COD_GRADO CHAR(3) NOT NULL PRIMARY KEY,
DESC_GRADO VARCHAR(30) NOT NULL 
)
GO

IF OBJECT_ID('PAIS') IS NOT NULL
BEGIN
DROP TABLE PAIS
END 
CREATE TABLE PAIS
(
COD_PAIS VARCHAR(10) NOT NULL PRIMARY KEY,
NOM_PAIS VARCHAR(45) NOT NULL
)
GO

IF OBJECT_ID('DISTRITO') IS NOT NULL
BEGIN
DROP TABLE DISTRITO
END 
CREATE TABLE DISTRITO
(
COD_DIST CHAR(2) NOT NULL PRIMARY KEY,
NOM_DIST VARCHAR(40) NOT NULL
)
GO

IF OBJECT_ID('PROVINCIA') IS NOT NULL
BEGIN
DROP TABLE PROVINCIA
END 
CREATE TABLE PROVINCIA
(
COD_PROV CHAR(7) NOT NULL PRIMARY KEY,
NOM_PROV VARCHAR(70) NOT NULL
)
GO

IF OBJECT_ID('UBIGEO') IS NOT NULL
BEGIN
DROP TABLE UBIGEO
END 
CREATE TABLE UBIGEO
(
ID_UBIGEO CHAR(7) NOT NULL PRIMARY KEY,
COD_PAIS VARCHAR(10) NOT NULL REFERENCES PAIS,
COD_PROV CHAR(7) NOT NULL REFERENCES PROVINCIA,
COD_DIST CHAR(2) NOT NULL REFERENCES DISTRITO
)
GO

IF OBJECT_ID('NIVEL_ENSEÑANZA') IS NOT NULL
BEGIN
DROP TABLE NIVEL_ENSEÑANZA
END 
CREATE TABLE NIVEL_ENSEÑANZA
(
COD_NIVEL_ENSE CHAR(5) NOT NULL PRIMARY KEY,
DESC_NIVEL_ENSE VARCHAR(40) NOT NULL,
)
GO

IF OBJECT_ID('ESPECIALIDAD') IS NOT NULL
BEGIN
DROP TABLE ESPECIALIDAD
END 
CREATE TABLE ESPECIALIDAD
(
COD_ESPEC CHAR(5) NOT NULL PRIMARY KEY,
DESC_ESP VARCHAR(40) NOT NULL
)
GO


IF OBJECT_ID('DIRECTOR') IS NOT NULL
BEGIN
DROP TABLE DIRECTOR
END 

CREATE TABLE DIRECTOR
(
COD_DIRECTOR CHAR(8) NOT NULL PRIMARY KEY,
NOM_PER VARCHAR(65) NOT NULL,
APE_PER VARCHAR(100) NOT NULL,
TELEF_PER VARCHAR(30) NOT NULL,
DIRECCIÓN_PER VARCHAR(90) NOT NULL
)
GO

IF OBJECT_ID('SECRETARIA') IS NOT NULL
BEGIN
DROP TABLE SECRETARIA
END 

CREATE TABLE SECRETARIA
(
COD_PERSONAL CHAR(6) NOT NULL PRIMARY KEY,
NOM_PER VARCHAR(65) NOT NULL,
APE_PER VARCHAR(100) NOT NULL,
DNI_PER CHAR(8) NOT NULL,
COD_ESPEC CHAR(5) NOT NULL REFERENCES ESPECIALIDAD,
TELEF_PER VARCHAR(30) NOT NULL,
DIRECCIÓN_PER VARCHAR(90) NOT NULL
)
GO

IF OBJECT_ID('PROFESOR') IS NOT NULL
BEGIN
DROP TABLE PROFESOR
END 

CREATE TABLE PROFESOR
(
COD_PROFESOR CHAR(8) NOT NULL PRIMARY KEY,
NOM_PER VARCHAR(65) NOT NULL,
APE_PER VARCHAR(100) NOT NULL,
DNI_PER CHAR(8) NOT NULL,
TELEF_PER VARCHAR(30) NOT NULL,
DIRECCIÓN_PER VARCHAR(90) NOT NULL,
COD_ESP CHAR(5) NOT NULL REFERENCES ESPECIALIDAD,
COD_NIVEL_ENSE CHAR(5) NOT NULL REFERENCES NIVEL_ENSEÑANZA
)
GO

IF OBJECT_ID('APODERADO') IS NOT NULL
BEGIN
DROP TABLE APODERADO
END 
CREATE TABLE APODERADO
(
DNI_APODERADO CHAR(8) NOT NULL PRIMARY KEY,
APE_APODERADO VARCHAR(65) NOT NULL,
NOM_APODERADO VARCHAR(65) NOT NULL,
TELF_APODERADO VARCHAR(30) NOT NULL,
ID_UBIGEO CHAR(7) NOT NULL REFERENCES UBIGEO
)
GO

IF OBJECT_ID('ESTUDIANTE') IS NOT NULL
BEGIN
DROP TABLE ESTUDIANTE
END 
CREATE TABLE ESTUDIANTE
(
COD_ESTU CHAR(8) NOT NULL PRIMARY KEY,
APE_ESTU VARCHAR(65) NOT NULL,
NOMBRE_ESTU VARCHAR(65) NOT NULL,
EDAD_ESTU INT NOT NULL,
DNI_ESTU CHAR(8) NOT NULL,
FEC_NAC_ESTU DATE NOT NULL,
NRO_HERMANOS INT NULL,
SEXO_ESTU CHAR(1) NOT NULL,
DISCAPACIDAD_ESTU VARCHAR(40) NOT NULL,
ID_UBIGEO CHAR(7) NOT NULL REFERENCES UBIGEO,
COD_NIVEL CHAR(3) NOT NULL REFERENCES NIVEL,
COD_IDIOMA CHAR(2) NOT NULL REFERENCES IDIOMA,
COD_GRADO CHAR(3) NOT NULL REFERENCES GRADO,
)
GO

IF OBJECT_ID('MATRICULA') IS NOT NULL
BEGIN
DROP TABLE MATRICULA
END 

CREATE TABLE MATRICULA
(
NRO_MATRICULA CHAR(4) NOT NULL PRIMARY KEY,
PRECIO_MATRICULA MONEY NOT NULL,
COD_TIPO_MAT CHAR(3) NOT NULL REFERENCES TIPO_MATRICULA,
COD_ESTU CHAR(8) NOT NULL REFERENCES ESTUDIANTE,
DNI_APODERADO CHAR(8) NOT NULL REFERENCES APODERADO,
COD_PERSONAL CHAR(6) NOT NULL REFERENCES SECRETARIA,
COD_DIRECTOR CHAR(8) NOT NULL REFERENCES DIRECTOR
)
GO


-- APLICANDO RESTRICCIONES

ALTER TABLE TIPO_MATRICULA
ADD CONSTRAINT CHK_TIPOMAT
CHECK (COD_TIPO_MAT LIKE 'M[0-9][0-9]')
GO


ALTER TABLE NIVEL
ADD CONSTRAINT CHK_CODNIV
CHECK (COD_NIVEL LIKE 'N[0-9][0-9]')
GO


ALTER TABLE GRADO
ADD CONSTRAINT CHK_CODGRA
CHECK (COD_GRADO LIKE 'G[0-9][0-9]')
GO


ALTER TABLE PROVINCIA
ADD CONSTRAINT CHK_CODPRO
CHECK (COD_PROV LIKE 'PRO[0-9][0-9][0-9][0-9]')
GO


ALTER TABLE NIVEL_ENSEÑANZA 
ADD CONSTRAINT CHK_CODNIVENSE
CHECK (COD_NIVEL_ENSE LIKE 'NIV[0-9][0-9]')
GO



ALTER TABLE ESPECIALIDAD 
ADD CONSTRAINT CHK_CODESPEC
CHECK (COD_ESPEC LIKE 'ESP[0-9][0-9]')
GO


ALTER TABLE SECRETARIA 
ADD CONSTRAINT CHK_CODSECRE
CHECK (COD_PERSONAL LIKE 'SEC[0-9][0-9][0-9]')
GO


ALTER TABLE UBIGEO 
ADD CONSTRAINT CHK_CODUBI
CHECK (ID_UBIGEO LIKE 'UBI[0-9][0-9][0-9][0-9]')
GO

ALTER TABLE ESTUDIANTE
ADD CONSTRAINT CHK_SEXOEST
CHECK(SEXO_ESTU IN ('F','M'))
GO

 ALTER TABLE ESTUDIANTE
 ADD CONSTRAINT DF_DISC
 DEFAULT 'NINGUNA' FOR [DISCAPACIDAD_ESTU]
 GO


INSERT INTO PAIS VALUES ('51','PERÚ'),
						('52','MÉXICO'),
						('54','ARGENTINA')

INSERT INTO DISTRITO VALUES ('05','COMAS'),
							('06','CARABAYLLO'),
							('28','INDEPENDENCIA')

INSERT INTO PROVINCIA VALUES ('PRO0001','LIMA'),
							 ('PRO0043','ANCASH'),
							 ('PRO0083','APURIMAC')

INSERT INTO UBIGEO VALUES ('UBI0001','51','PRO0001','05'),
						  ('UBI0002','51','PRO0001','06'),
						  ('UBI0003','51','PRO0083','05'),
						  ('UBI0004','51','PRO0043','28'),
						  ('UBI0005','51','PRO0001','28'),
						  ('UBI0006','51','PRO0043','06')

INSERT INTO NIVEL VALUES ('N02','PRIMARIA'),
						 ('N01','INICIAL')


INSERT INTO IDIOMA VALUES ('ES','ESPAÑOL-CASTELLANO'),
						  ('EN','INGLÉS')


INSERT INTO GRADO VALUES ('G04','PRIMER GRADO'),
		                 ('G05','SEGUNDO GRADO'),
						 ('G06','TERCER GRADO')

INSERT INTO ESTUDIANTE VALUES ('E0000001','RAMIREZ SOTO','CARLOS',7,'98457623','12/08/2015 00:00:00','2','M',DEFAULT,'UBI0001','N02','ES','G04'),
							  ('E0000002','GUTIERREZ ESPINOZA','DANNY',8,'71795575','11/09/2016 00:00:00','1','M',DEFAULT,'UBI0002','N02','ES','G05'),
							  ('E0000003','VACEL LIDIO','CAMILA',9,'55474256','07/06/2017 00:00:00','2','F','DISCAPACIDAD VISUAL','UBI0003','N01','ES','G06'),
							  ('E0000004','HIDALGO CAYCHO','DIANA',6,'75824019','09/03/2015 00:00:00','1','F',DEFAULT,'UBI0001','N02','ES','G06'),
							  ('E0000005','LOPEZ MARTINEZ','LAURA',6,'98604013','09/10/2014 00:00:00','3','F',DEFAULT,'UBI0005','N02','ES','G04'),
							  ('E0000006','MARTINEZ RIVERA','LORENZO',9,'98776782','06/03/2016 00:00:00','2','M',DEFAULT,'UBI0004','N01','ES','G06'),
							  ('E0000007','RODRIGUEZ VACEL','GIANFRANCO',8,'24533443','11/10/2014 00:00:00','2','M','DISCAPACIDAD AUDITIVA','UBI0006','N01','ES','G05'),
							  ('E0000008','VACEL MOLINA','FERNANDA',7,'34346565','04/10/2015 00:00:00','2','F','DISCAPACIDAD AUDITIVA','UBI0001','N02','ES','G04'),
							  ('E0000009','SALAS RAMIREZ','ROLANDO',6,'24539800','10/05/2015 00:00:00','1','M','DISCAPACIDAD AUDITIVA','UBI0002','N02','ES','G06'),
							  ('E0000010','RAMIREZ MENDIOLA','GIANINA',7,'98766567','05/06/2014 00:00:00','2','F',DEFAULT,'UBI0003','N01','ES','G06')				

INSERT INTO APODERADO VALUES ('74457922','RAMIREZ LOCUAS','FEDERICO ELIANO','7267764','UBI0001'),
							 ('22542956','ESPINOZA DERNA','LILIAM','989055505/4527535','UBI0005'),
							 ('45558575','VACEL CARL','MARCOS','4452262','UBI0003'),
							 ('89558573','MARTINEZ MORALES','LUIS','967893021/8798761','UBI0003'),
							 ('42540925','CAYCHO PINEDA','DIANA','967454466/9874333','UBI0001')

INSERT INTO DIRECTOR VALUES ('45789856','RENÉ','FIGUERO SOTELO','979456222','JR ALMENDRAS #244')
							

INSERT INTO ESPECIALIDAD VALUES ('ESP01','MATEMÁTICA'),
								('ESP02','COMUNICACIÓN'),
								('ESP03','RELIGIÓN'),
								('ESP04','CIENCIAS'),
								('ESP05','SECRETARÍA')
	

INSERT INTO TIPO_MATRICULA VALUES ('M01','REGULAR'),
								  ('M02','NUEVO'),
								  ('M03','REINCORPORACIÓN')

INSERT INTO SECRETARIA VALUES ('SEC001','ALEJANDRA','LUNA ESPINOZA','77585545','ESP05','988201105','JR MIGUEL GRAU #141'),
							  ('SEC002','MARIBEL ISIDORA','ESPINOZA GUTIERREZ','44585245','ESP02','988552262','JR MIGUEL GRAU #141'),
							  ('SEC003','ALEXANDRA','RAMIN SAVEDRA','88599658','ESP05','999665254','JR HUERTAS #322')

INSERT INTO MATRICULA VALUES ('0001',210,'M01','E0000001','74457922','SEC001','45789856'),
                             ('0002',210,'M01','E0000002','22542956','SEC002','45789856'),
							 ('0003',200,'M03','E0000003','45558575','SEC003','45789856'),
							 ('0004',210,'M01','E0000004','42540925','SEC001','45789856'),
							 ('0005',200,'M03','E0000005','89558573','SEC001','45789856'),
							 ('0006',210,'M01','E0000006','89558573','SEC001','45789856'),
							 ('0007',250,'M02','E0000007','45558575','SEC001','45789856'),
							 ('0008',250,'M02','E0000008','45558575','SEC001','45789856'),
							 ('0009',210,'M01','E0000009','74457922','SEC001','45789856'),
							 ('0010',200,'M03','E0000010','74457922','SEC001','45789856')

INSERT INTO NIVEL_ENSEÑANZA VALUES ('NIV02','PRIMARIA'),
							       ('NIV01','INICIAL')
								  

INSERT INTO PROFESOR VALUES ('P0000001','JUDITH','DIAS SEGURA','75489653','996455852','JR BARTOLOMÉ #111','ESP03','NIV02'),
							('P0000002','MARIBEL ISIDORA','ESPINOZA GUTIERREZ','44585245','988552262','JR MIGUEL GRAU #141','ESP02','NIV02'),
							('P0000003','MIRTHA MARIELA','ESPINOZA GUTIERREZ','85299968','996455852','JR MIGUEL GRAU #141','ESP01','NIV02'),
							('P0000004','NIDIA DOLIDITH','ESPINOZA GUTIERREZ','88579255','963325422','JR MIGUEL GRAU #141','ESP03','NIV01'),
							('P0000005','LAURA','CARMONA RAMIREZ','89304956','963325422','JR LAS COLINAS #199','ESP01','NIV01'),
							('P0000006','JONATHAN','GUERRERO DIAZ','98765478','987898777','JR LOS LIBERTADORES #176','ESP04','NIV02'),
							('P0000007','LOREN','ESPINOZA RUIZ','56765489','987543453','JR MIGUEL GRAU #141','ESP01','NIV01'),
							('P0000008','CARLOS','ROBLES RUIDIAZ','09876567','637483924','JR BARTOLOMÉ #111','ESP01','NIV02'),
							('P0000009','YOLANDA','MARTINEZ POOL','34253678','657483394','JR LOS LIBERTADORES #176','ESP04','NIV01'),
							('P0000010','SERGIO','LOPEZ CARDENAS','73645372','764748339','JR MIGUEL GRAU #141','ESP03','NIV01')

GO

--------------------------------------------------------------------------------------------------------------------------------------------
-- NOS AYUDA A VER LOS APODERADOS DE ACADA ALUMNO SIENDO ASI POSIBLE CONTACTAR RAPIDAMENTE A ELLOS EN CASO DE EMERGENCIAS 
-- O LA FALTA DE DOCUMENTACION JUNTO AL NÚMERO DE MATRÍCULA

CREATE VIEW LISTADO_APODERADOXESTUDIANTE
AS
SELECT  M.NRO_MATRICULA AS 'Número de matrícula',
		E.APE_ESTU+' '+E.NOMBRE_ESTU AS Estudiante,
		A.APE_APODERADO+' '+NOM_APODERADO AS Apoderado
      
FROM MATRICULA AS M 
JOIN APODERADO AS A
ON M.DNI_APODERADO=A.DNI_APODERADO 
JOIN ESTUDIANTE AS E
ON M.COD_ESTU=E.COD_ESTU       
GO

SELECT * FROM LISTADO_APODERADOXESTUDIANTE
GO


--------------------------------------------------------------------------------------------------------------------------------------------

--REPORTE GENERAL DE ALUMNOS 

CREATE VIEW LISTADO_ALUMNOS
AS
SELECT E.COD_ESTU AS 'Código de estudiante',
	   E.APE_ESTU+' '+E.NOMBRE_ESTU AS Estudiante,
	   N.DESC_NIVEL AS Nivel,
	   G.DESC_GRADO AS Grado,
	   TM.DESC_TIPO_MAT AS 'Tipo de matrícula'
      
FROM ESTUDIANTE AS E
JOIN MATRICULA AS M
ON E.COD_ESTU=M.COD_ESTU
JOIN TIPO_MATRICULA AS TM
ON M.COD_TIPO_MAT=TM.COD_TIPO_MAT
JOIN GRADO AS G
ON E.COD_GRADO=G.COD_GRADO
JOIN NIVEL AS N
ON E.COD_NIVEL=N.COD_NIVEL
          
GO

SELECT * FROM LISTADO_ALUMNOS
GO
----------------------------------------------------------------------------------------------------------------------------------------

-- SIRVE PARA VER CUANTOS ALUMNOS DE NIVEL INICIAL PASARAN A PRIMARIA, YA SIENDO REGULARES, NUEVOS O REINCORPORADOS, YA QUE ESTO
-- NOS DARA UN BALANCE DE LAS VACANTES PARA EL SIGUIENTE AÑO.

--PRIMERO VEREMOS EL DETALLE

CREATE PROCEDURE SP_LISTADO_ALUMNOS_TRANSICION
AS
BEGIN
SELECT L.[Código de estudiante],
	   L.Estudiante,
	   L.Grado,
	   L.Nivel
FROM LISTADO_ALUMNOS AS L
WHERE L.Nivel='INICIAL' AND L.Grado='TERCER GRADO'
END
GO


EXECUTE SP_LISTADO_ALUMNOS_TRANSICION
GO

--AHORA CONTAREMOS LA CANTIDAD DE ALUMNOS QUE PASARÁN DE INICIAL A PRIMARIA

CREATE PROCEDURE SP_CANTIDAD_ALUMNOS_TRANSICION
AS
BEGIN
SELECT L.Nivel,
	   L.Grado,
	   COUNT(*) AS 'Cantidad de alumnos'
FROM LISTADO_ALUMNOS AS L
WHERE L.Nivel='INICIAL' AND L.Grado='TERCER GRADO'
GROUP BY L.Nivel, L.Grado
END
GO


EXECUTE SP_CANTIDAD_ALUMNOS_TRANSICION
GO

--------------------------------------------------------------------------------------------------------------------------------------
--BUSCAR Y LISTAR ALUMNOS SEGUN TIPO DE MATRÍCULA

CREATE PROCEDURE SP_ALUMNOSXTIPO_MATRICULA
@tipomat  VARCHAR(50)
AS
IF EXISTS(SELECT*FROM TIPO_MATRICULA
		  WHERE DESC_TIPO_MAT=@tipomat)
BEGIN
SELECT E.COD_ESTU AS 'Código de estudiante',
	   E.APE_ESTU+' '+E.NOMBRE_ESTU AS Estudiante,
	   N.DESC_NIVEL AS Nivel,
	   G.DESC_GRADO AS Grado,
	   E.DNI_ESTU AS DNI,
	   E.SEXO_ESTU AS Género,
	   TM.DESC_TIPO_MAT AS 'Tipo de matrícula'

FROM ESTUDIANTE AS E
JOIN MATRICULA AS M
ON E.COD_ESTU=M.COD_ESTU
JOIN TIPO_MATRICULA AS TM
ON M.COD_TIPO_MAT=TM.COD_TIPO_MAT
JOIN GRADO AS G
ON E.COD_GRADO=G.COD_GRADO
JOIN NIVEL AS N
ON E.COD_NIVEL=N.COD_NIVEL
WHERE TM.DESC_TIPO_MAT=@tipomat
ORDER BY G.DESC_GRADO DESC
END
ELSE
BEGIN
PRINT 'NO EXISTE ALUMNO'
END
GO


EXECUTE SP_ALUMNOSXTIPO_MATRICULA 'REGULAR'
GO

------------------------------------------------------------------------------------------------------------------------------

--VISTA GENERAL DE DOCENTES

CREATE VIEW LISTADO_DOCENTES
AS
SELECT P.COD_PROFESOR AS Código,
	   P.APE_PER+' '+P.NOM_PER AS Docente,
	   E.DESC_ESP AS Especialidad,
	   NE.DESC_NIVEL_ENSE AS 'Nivel de enseñanza'
   
FROM PROFESOR AS P
JOIN NIVEL_ENSEÑANZA AS NE
ON P.COD_NIVEL_ENSE=NE.COD_NIVEL_ENSE
JOIN ESPECIALIDAD AS E
ON P.COD_ESP=E.COD_ESPEC          
GO

SELECT * FROM LISTADO_DOCENTES
GO

---------------------------------------------------------------------------------------------------------------------------------
--CLASIFICAR DOCENTE POR NIVEL DE ENSEÑANZA

CREATE PROCEDURE SP_LISTADO_DOCENTEXNIVEL_ENSEÑANZA
@nivel	VARCHAR(40)
AS
IF EXISTS(SELECT*FROM LISTADO_DOCENTES
		  WHERE [Nivel de enseñanza]=@nivel)
BEGIN
SELECT * FROM LISTADO_DOCENTES AS L
WHERE L.[Nivel de enseñanza]=@nivel
END
ELSE
BEGIN
PRINT 'EL NIVEL DE ENSEÑANZA INGRESADO NO EXISTE'
END
GO


EXECUTE SP_LISTADO_DOCENTEXNIVEL_ENSEÑANZA 'PRIMARIA'
GO

---------------------------------------------------------------------------------------------------------------------------------------
--CLASIFICAR DOCENTE POR ESPECIALIDAD

CREATE PROCEDURE SP_LISTADO_DOCENTEXESPECIALIDAD
@espe	VARCHAR(40)
AS
IF EXISTS(SELECT*FROM LISTADO_DOCENTES
		  WHERE Especialidad=@espe)
BEGIN
SELECT * FROM LISTADO_DOCENTES AS L
WHERE L.Especialidad=@espe
END
ELSE
BEGIN
PRINT 'LA ESPECIALIDAD INGRESADA NO EXISTE'
END
GO


EXECUTE SP_LISTADO_DOCENTEXESPECIALIDAD 'MATEMÁTICA'
GO


-------------------------------------------------------------------------------------------------------------------------------

--CON ESTE PROCEDIMIENTO ALMACENADO PODREMOS SISTEMATIZAR LA SUMA DE LOS INGRESOS OBTENIDOS DE LOS PAGOS DE LAS MATRÍCULAS 
--SUMATORIA GENERAL 

SELECT SUM(M.PRECIO_MATRICULA) AS 'Suma de importes'
FROM MATRICULA AS M
GO

--SUMATORIA POR TIPO DE MATRÍCULA (SIN PARÁMETRO)

CREATE PROCEDURE SP_SUMA_IMPORTESXTIPO_SIN_PARAMETRO
AS
BEGIN
SELECT TM.DESC_TIPO_MAT AS 'Tipo de matrícula',
	   SUM(M.PRECIO_MATRICULA) AS 'Suma de importes'
FROM MATRICULA AS M
JOIN TIPO_MATRICULA AS TM
ON M.COD_TIPO_MAT=TM.COD_TIPO_MAT
GROUP BY TM.DESC_TIPO_MAT
ORDER BY SUM(M.PRECIO_MATRICULA) ASC
END
GO


EXECUTE  SP_SUMA_IMPORTESXTIPO_SIN_PARAMETRO
GO


--SUMATORIA POR TIPO DE MATRÍCULA (CON PARÁMETRO)

CREATE PROCEDURE SP_SUMA_IMPORTESXTIPO_CON_PARAMETRO
@tipomat  VARCHAR(50)
AS
IF EXISTS(SELECT*FROM TIPO_MATRICULA
		  WHERE DESC_TIPO_MAT=@tipomat)
BEGIN
SELECT TM.DESC_TIPO_MAT AS 'Tipo de matrícula',
	   SUM(M.PRECIO_MATRICULA) AS 'Suma de importes'
FROM MATRICULA AS M
JOIN TIPO_MATRICULA AS TM
ON M.COD_TIPO_MAT=TM.COD_TIPO_MAT
WHERE TM.DESC_TIPO_MAT=@tipomat
GROUP BY TM.DESC_TIPO_MAT
ORDER BY SUM(M.PRECIO_MATRICULA) ASC
END
ELSE
BEGIN
PRINT 'EL TIPO DE MATRÍCULA INGRESADO NO EXISTE'
END
GO


EXECUTE  SP_SUMA_IMPORTESXTIPO_CON_PARAMETRO 'NUEVO'
GO


---------------------------------------------------------------------------------------------------------------------------------------
--MODIFICAR EL PRECIO DE LA MATRÍCULA POR TIPO DE MATRICULA
--PRIMERO CREAMOS LA VISTA
CREATE VIEW CAMBIOS_PRECIO
AS
SELECT  M.NRO_MATRICULA AS 'Número de matrícula',
		E.APE_ESTU+' '+E.NOMBRE_ESTU AS Estudiante,
		M.PRECIO_MATRICULA AS Precio,
		TM.DESC_TIPO_MAT AS 'Tipo de matrícula'
	   
FROM MATRICULA AS M
JOIN TIPO_MATRICULA AS TM
ON M.COD_TIPO_MAT=TM.COD_TIPO_MAT
JOIN ESTUDIANTE AS E
ON M.COD_ESTU=E.COD_ESTU
GO

SELECT*FROM CAMBIOS_PRECIO
GO


CREATE PROCEDURE SP_MODIFICAR_PRECIOXTIPO
@tipomat VARCHAR(50),
@precio	MONEY
AS
IF EXISTS(SELECT*FROM TIPO_MATRICULA
		  WHERE DESC_TIPO_MAT=@tipomat)
BEGIN
	UPDATE CAMBIOS_PRECIO
	SET PRECIO=@precio
	WHERE [Tipo de matrícula]=@tipomat
END
ELSE
BEGIN
PRINT 'EL TIPO DE MATRÍCULA INGRESADO NO EXISTE'
END
GO


EXECUTE  SP_MODIFICAR_PRECIOXTIPO 'NUEVO', 200
GO

SELECT*FROM CAMBIOS_PRECIO
GO


---------------------------------------------------------------------------------------------------------------------------------------
--INGRESAR UN NUEVO ESTUDIANTE


CREATE VIEW ACTUALIZACION_ESTUDIANTES
AS
SELECT E.COD_ESTU AS 'Código de estudiante',
	   E.APE_ESTU+' '+E.NOMBRE_ESTU AS Estudiante,
	   E.EDAD_ESTU AS Edad,
	   E.DNI_ESTU AS DNI,
	   E.FEC_NAC_ESTU AS 'Fecha de nacimiento',
	   E.NRO_HERMANOS AS 'Número de hermanos',
	   E.SEXO_ESTU AS Género,
	   E.DISCAPACIDAD_ESTU AS Discapacidad,
	   N.DESC_NIVEL AS Nivel,
	   G.DESC_GRADO AS Grado,
	   P.NOM_PAIS AS País,
	   PR.NOM_PROV AS Provincia,
	   D.NOM_DIST AS Distrito
   
FROM ESTUDIANTE AS E
JOIN GRADO AS G
ON E.COD_GRADO=G.COD_GRADO
JOIN NIVEL AS N
ON E.COD_NIVEL=N.COD_NIVEL
JOIN IDIOMA AS I
ON I.COD_IDIOMA=E.COD_IDIOMA
JOIN UBIGEO AS U
ON E.ID_UBIGEO=U.ID_UBIGEO
JOIN DISTRITO AS D
ON D.COD_DIST=U.COD_DIST
JOIN PAIS AS P
ON P.COD_PAIS=U.COD_PAIS
JOIN PROVINCIA PR
ON U.COD_PROV=PR.COD_PROV
GO

SELECT * FROM ACTUALIZACION_ESTUDIANTES
GO


CREATE PROC ACTUALIZACION_ESTUDIANTE
@codigo	CHAR(8),
@ape	VARCHAR(65),
@nom	VARCHAR(65),
@edad	INT,
@dni	CHAR(8),
@fecnac	DATE,
@nroher	INT,
@sexo	CHAR(1),
@disc	VARCHAR(40),
@ubigeo	CHAR(7),
@nivel	CHAR(3),
@idioma CHAR(2),
@grado	CHAR(3)
AS
INSERT INTO ESTUDIANTE VALUES (@codigo,@ape,@nom,@edad,@dni,@fecnac,@nroher,@sexo,@disc,@ubigeo,@nivel,@idioma,@grado)
GO

EXEC ACTUALIZACION_ESTUDIANTE 'E0000011','BARRERA VACEL','JUAN',8,'90457677','11/11/2013 00:00:00','3','M','DISCAPACIDAD VISUAL','UBI0004','N01','ES','G06'
GO

SELECT * FROM ACTUALIZACION_ESTUDIANTES
GO

---------------------------------------------------------------------------------------------------------------------------------------
--ELIMINAR UN ESTUDIANTE POR CODIGO

CREATE PROC SP_ELIMINAR_ESTUDIANTEXCODIGO
@cod  CHAR(8)
AS
IF EXISTS(SELECT*FROM ESTUDIANTE
		  WHERE COD_ESTU=@cod)
BEGIN
DELETE FROM ESTUDIANTE
WHERE COD_ESTU=@cod
END
ELSE
BEGIN
PRINT 'EL CÓDIGO INGRESADO NO EXISTE'
END
GO

EXEC SP_ELIMINAR_ESTUDIANTEXCODIGO 'E0000011'
GO

SELECT*FROM ACTUALIZACION_ESTUDIANTES
GO